@import "../css/definitions.less";

.QthValue {
	/* As code */
	font-family: monospace;
	white-space: pre;
	
	/* Truncate to fit one line */
	overflow: hidden;
	text-overflow: ellipsis;
}

.QthValue-change-animation {
	/* Flying underline */
	&:before {
		content: "";
		
		display: block;
		position: absolute;
		bottom: 0;
		height: 2px;
		
		left: 0;
		width: 0%;
		
		background-color: @secondary-colour;
	}
	
	&.QthValue-change-animation-enter-active:before {
		width: 100%;
		transition: width @qth-value-change-duration ease-in;
	}
	&.QthValue-change-animation-enter-done:before {
		left: auto;
		right: 0;
		width: 0%;
		transition: width @qth-value-change-duration ease-out;
	}
	
	/* Hide old value */
	&.QthValue-change-animation-exit-active {
		display: none;
	}
}


.QthEventValue {
	.QthValue;
	
	/* Add animation for new values appearing. */
	.QthValue-change-animation;
	
	/* Gradually fade out events */
	&.QthValue-change-animation-enter-done {
		opacity: 0.0;
		transition: opacity @qth-event-fade-duration ease-out;
	}
}


/* Property change: normal animation. */
.QthPropertyValue-normal-animation {
	.QthPropertyValue {
		.QthValue;
		
		.QthValue-change-animation;
	}
}

/* Property change: not animated. */
.QthPropertyValue-no-animation {
	.QthPropertyValue {
		.QthValue;
		
		&.QthValue-change-animation-exit-active {
			display: none;
		}
	}
}

/* Give property chance to load before showing '(deleted)'. */
.QthPropertyValue-delay-animation {
	.QthPropertyValue {
		.QthValue;
		
		/* NB: This animation is only used on initial creation so the 'enter' and
		 * 'exit' bits here are only here for defensive programming reasons...
		 */
		
		&.QthValue-change-animation-enter-active,
		&.QthValue-change-animation-appear-active {
			opacity: 0.0;
		}
		&.QthValue-change-animation-enter-done,
		&.QthValue-change-animation-appear-done {
			opacity: 1.0;
			transition: opacity @qth-value-change-duration;
			transition-delay: @qth-value-change-duration;
		}
		
		&.QthValue-change-animation-exit-active {
			display: none;
		}
	}
}

/* Animate deletion of a property. */
.QthPropertyValue-delete-animation {
	position: relative;
	
	.QthPropertyValue {
		.QthValue;
		
		&.QthValue-change-animation-enter-active {
			/* New value (i.e. '(deleted)') hides in waiting for deletion animation */
			opacity: 0.0;
		}
		&.QthValue-change-animation-enter-done {
			/* After the old value is gone fade in the '(deleted)' message. The
			 * additional delay just makes the break cleaner.
			 */
			opacity: 1.0;
			transition: opacity @qth-value-change-duration;
			transition-delay: @qth-value-change-duration;
		}
		
		&.QthValue-change-animation-exit,
		&.QthValue-change-animation-exit-active {
			/* The new value will appear 'on top' so place this one directly
			 * underneath. */
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			
			/* Cross-out the old value */
			text-decoration: line-through;
			
			opacity: 0.0;
			transition: opacity @qth-value-change-duration ease-in;
		}
	}
}
