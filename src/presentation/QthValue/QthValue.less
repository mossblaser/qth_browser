@import "../css/definitions.less";

.QthValue {
	font-family: monospace;
	white-space: pre;
	word-break: break-all;
}

.QthValue-container {
	position: relative;
}

.QthValue-container .QthValue-text {
	text-overflow: ellipsis;
	
	&.property-initial-appear,
	&.property-initial-enter {
		opacity: 0.0;
	}
	&.property-initial-appear-active,
	&.property-initial-enter-active {
		opacity: 1.0;
		
		transition: opacity @qth-value-fade-duration ease-out;
		transition-delay: @qth-value-initial-value-delay;
	}
	
	/* A slide-across underline animation on change (except for deleting). */
	&:before {
		content: "";
		
		display: block;
		position: absolute;
		bottom: 0;
		height: 2px;
		
		left: 0;
		width: 0%;
		
		background-color: @primary-colour;
	}
	&.event-appear-active,
	&.event-enter-active,
	&.property-appear-active,
	&.property-enter-active {
		&:before {
			width: 100%;
			transition: width @qth-value-change-duration ease-in;
		}
	}
	&.event-appear-done,
	&.event-enter-done,
	&.property-appear-done,
	&.property-enter-done {
		&:before {
			left: auto;
			right: 0;
			width: 0%;
			transition: width @qth-value-change-duration ease-out;
		}
	}
	
	/* 'Current' event values should fade after a while */
	&.event-appear-done,
	&.event-enter-done {
		opacity: 0;
		transition: opacity @qth-event-fade-duration;
	}
	
	/* Previous values disappear immediately */
	&.event-exit-active,
	&.property-exit-active,
	&.property-deleted-exit-active,
	&.property-initial-exit-active {
		display: none;
	}
}

/* Disable animations for value changes immediately after value is displayed
 * (e.g. for initial display of a property). */
.QthValue-container.disable-animation .QthValue-text {
	/* XXX: This also disables the animation for events which happen to fire
	 * during first few ms of display, not just poperties... */
	&:before {
		display: none;
	}
}

.QthValue-container.deleting .QthValue-text {
	/* When deleting, old values are crossed out first */
	&.property-appear,
	&.property-enter,
	&.property-deleted-appear,
	&.property-deleted-enter {
		opacity: 0.0;
	}
	
	&.property-appear-active,
	&.property-enter-active,
	&.property-deleted-appear-active,
	&.property-deleted-enter-active {
		opacity: 1.0;
		transition: opacity @qth-value-fade-duration;
		transition-delay: @qth-value-delete-duration;
	}
	
	&.event-exit,
	&.property-exit,
	&.property-initial-exit,
	&.property-deleted-exit,
	&.event-exit-active,
	&.property-exit-active,
	&.property-deleted-exit-active,
	&.property-initial-exit-active {
		/* Keep the old value around */
		display: block;
		
		/* New value will keep the container the right size. */
		position: absolute;
		top: 0;
		left: 0;
		
		/* Cross out */
		&:before {
			content: "";
			
			display: block;
			position: absolute;
			
			height: 1px;
			
			top: 50%;
			left: 0;
			
			background-color: black;
		}
	}
	
	&.event-exit,
	&.property-exit,
	&.property-deleted-exit,
	&.property-initial-exit {
		opacity: 1.0;
		
		&:before {
			width: 0%;
		}
	}
	
	&.event-exit-active,
	&.property-exit-active,
	&.property-deleted-exit-active,
	&.property-initial-exit-active {
		opacity: 0.0;
		transition: opacity @qth-value-delete-duration ease-in;
		
		&:before {
			width: 100%;
			transition: width @qth-value-delete-duration ease-out;
		}
	}
}
